<?php
/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
include_once $GLOBALS['THRIFT_ROOT'].'/Thrift.php';


class DrillColumn {
  static $_TSPEC;

  public $columnName = null;
  public $weight = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'columnName',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'weight',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['columnName'])) {
        $this->columnName = $vals['columnName'];
      }
      if (isset($vals['weight'])) {
        $this->weight = $vals['weight'];
      }
    }
  }

  public function getName() {
    return 'DrillColumn';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->columnName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->weight);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DrillColumn');
    if ($this->columnName !== null) {
      $xfer += $output->writeFieldBegin('columnName', TType::STRING, 1);
      $xfer += $output->writeString($this->columnName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->weight !== null) {
      $xfer += $output->writeFieldBegin('weight', TType::STRING, 2);
      $xfer += $output->writeString($this->weight);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Table {
  static $_TSPEC;

  public $tableName = null;
  public $position = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'tableName',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'position',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['tableName'])) {
        $this->tableName = $vals['tableName'];
      }
      if (isset($vals['position'])) {
        $this->position = $vals['position'];
      }
    }
  }

  public function getName() {
    return 'Table';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tableName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->position);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Table');
    if ($this->tableName !== null) {
      $xfer += $output->writeFieldBegin('tableName', TType::STRING, 1);
      $xfer += $output->writeString($this->tableName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->position !== null) {
      $xfer += $output->writeFieldBegin('position', TType::STRING, 2);
      $xfer += $output->writeString($this->position);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DimColumn {
  static $_TSPEC;

  public $columnName = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'columnName',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['columnName'])) {
        $this->columnName = $vals['columnName'];
      }
    }
  }

  public function getName() {
    return 'DimColumn';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->columnName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DimColumn');
    if ($this->columnName !== null) {
      $xfer += $output->writeFieldBegin('columnName', TType::STRING, 1);
      $xfer += $output->writeString($this->columnName);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Column {
  static $_TSPEC;

  public $columnName = null;
  public $columnAlias = null;
  public $columnDesc = null;
  public $nullable = null;
  public $dataType = null;
  public $aggregateable = null;
  public $aggrRule = null;
  public $drillColumns = null;
  public $tables = null;
  public $dimColumns = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'columnName',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'columnAlias',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'columnDesc',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'nullable',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'dataType',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'aggregateable',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'aggrRule',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'drillColumns',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'DrillColumn',
            ),
          ),
        9 => array(
          'var' => 'tables',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'Table',
            ),
          ),
        10 => array(
          'var' => 'dimColumns',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'DimColumn',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['columnName'])) {
        $this->columnName = $vals['columnName'];
      }
      if (isset($vals['columnAlias'])) {
        $this->columnAlias = $vals['columnAlias'];
      }
      if (isset($vals['columnDesc'])) {
        $this->columnDesc = $vals['columnDesc'];
      }
      if (isset($vals['nullable'])) {
        $this->nullable = $vals['nullable'];
      }
      if (isset($vals['dataType'])) {
        $this->dataType = $vals['dataType'];
      }
      if (isset($vals['aggregateable'])) {
        $this->aggregateable = $vals['aggregateable'];
      }
      if (isset($vals['aggrRule'])) {
        $this->aggrRule = $vals['aggrRule'];
      }
      if (isset($vals['drillColumns'])) {
        $this->drillColumns = $vals['drillColumns'];
      }
      if (isset($vals['tables'])) {
        $this->tables = $vals['tables'];
      }
      if (isset($vals['dimColumns'])) {
        $this->dimColumns = $vals['dimColumns'];
      }
    }
  }

  public function getName() {
    return 'Column';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->columnName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->columnAlias);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->columnDesc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nullable);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->dataType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->aggregateable);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->aggrRule);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::LST) {
            $this->drillColumns = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $elem5 = new DrillColumn();
              $xfer += $elem5->read($input);
              $this->drillColumns []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::LST) {
            $this->tables = array();
            $_size6 = 0;
            $_etype9 = 0;
            $xfer += $input->readListBegin($_etype9, $_size6);
            for ($_i10 = 0; $_i10 < $_size6; ++$_i10)
            {
              $elem11 = null;
              $elem11 = new Table();
              $xfer += $elem11->read($input);
              $this->tables []= $elem11;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::LST) {
            $this->dimColumns = array();
            $_size12 = 0;
            $_etype15 = 0;
            $xfer += $input->readListBegin($_etype15, $_size12);
            for ($_i16 = 0; $_i16 < $_size12; ++$_i16)
            {
              $elem17 = null;
              $elem17 = new DimColumn();
              $xfer += $elem17->read($input);
              $this->dimColumns []= $elem17;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Column');
    if ($this->columnName !== null) {
      $xfer += $output->writeFieldBegin('columnName', TType::STRING, 1);
      $xfer += $output->writeString($this->columnName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->columnAlias !== null) {
      $xfer += $output->writeFieldBegin('columnAlias', TType::STRING, 2);
      $xfer += $output->writeString($this->columnAlias);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->columnDesc !== null) {
      $xfer += $output->writeFieldBegin('columnDesc', TType::STRING, 3);
      $xfer += $output->writeString($this->columnDesc);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nullable !== null) {
      $xfer += $output->writeFieldBegin('nullable', TType::STRING, 4);
      $xfer += $output->writeString($this->nullable);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dataType !== null) {
      $xfer += $output->writeFieldBegin('dataType', TType::STRING, 5);
      $xfer += $output->writeString($this->dataType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->aggregateable !== null) {
      $xfer += $output->writeFieldBegin('aggregateable', TType::STRING, 6);
      $xfer += $output->writeString($this->aggregateable);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->aggrRule !== null) {
      $xfer += $output->writeFieldBegin('aggrRule', TType::STRING, 7);
      $xfer += $output->writeString($this->aggrRule);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->drillColumns !== null) {
      if (!is_array($this->drillColumns)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('drillColumns', TType::LST, 8);
      {
        $output->writeListBegin(TType::STRUCT, count($this->drillColumns));
        {
          foreach ($this->drillColumns as $iter18)
          {
            $xfer += $iter18->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tables !== null) {
      if (!is_array($this->tables)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('tables', TType::LST, 9);
      {
        $output->writeListBegin(TType::STRUCT, count($this->tables));
        {
          foreach ($this->tables as $iter19)
          {
            $xfer += $iter19->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dimColumns !== null) {
      if (!is_array($this->dimColumns)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('dimColumns', TType::LST, 10);
      {
        $output->writeListBegin(TType::STRUCT, count($this->dimColumns));
        {
          foreach ($this->dimColumns as $iter20)
          {
            $xfer += $iter20->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Schema {
  static $_TSPEC;

  public $schemaName = null;
  public $schemaDesc = null;
  public $columns = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'schemaName',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'schemaDesc',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'columns',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'Column',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['schemaName'])) {
        $this->schemaName = $vals['schemaName'];
      }
      if (isset($vals['schemaDesc'])) {
        $this->schemaDesc = $vals['schemaDesc'];
      }
      if (isset($vals['columns'])) {
        $this->columns = $vals['columns'];
      }
    }
  }

  public function getName() {
    return 'Schema';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->schemaName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->schemaDesc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->columns = array();
            $_size21 = 0;
            $_etype24 = 0;
            $xfer += $input->readListBegin($_etype24, $_size21);
            for ($_i25 = 0; $_i25 < $_size21; ++$_i25)
            {
              $elem26 = null;
              $elem26 = new Column();
              $xfer += $elem26->read($input);
              $this->columns []= $elem26;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Schema');
    if ($this->schemaName !== null) {
      $xfer += $output->writeFieldBegin('schemaName', TType::STRING, 1);
      $xfer += $output->writeString($this->schemaName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->schemaDesc !== null) {
      $xfer += $output->writeFieldBegin('schemaDesc', TType::STRING, 2);
      $xfer += $output->writeString($this->schemaDesc);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->columns !== null) {
      if (!is_array($this->columns)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('columns', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRUCT, count($this->columns));
        {
          foreach ($this->columns as $iter27)
          {
            $xfer += $iter27->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class PromptFilter {
  static $_TSPEC;

  public $formula = null;
  public $schema = null;
  public $op = null;
  public $defaultOn = null;
  public $defaultValue = null;
  public $defaultValue2 = null;
  public $values = null;
  public $control = null;
  public $includeAllChoices = null;
  public $constrainChoices = null;
  public $setVariable = null;
  public $setVariableValue = null;
  public $type = null;
  public $caption = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'formula',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'schema',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'op',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'defaultOn',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'defaultValue',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'defaultValue2',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'values',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'control',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'includeAllChoices',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'constrainChoices',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'setVariable',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'setVariableValue',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'type',
          'type' => TType::STRING,
          ),
        14 => array(
          'var' => 'caption',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['formula'])) {
        $this->formula = $vals['formula'];
      }
      if (isset($vals['schema'])) {
        $this->schema = $vals['schema'];
      }
      if (isset($vals['op'])) {
        $this->op = $vals['op'];
      }
      if (isset($vals['defaultOn'])) {
        $this->defaultOn = $vals['defaultOn'];
      }
      if (isset($vals['defaultValue'])) {
        $this->defaultValue = $vals['defaultValue'];
      }
      if (isset($vals['defaultValue2'])) {
        $this->defaultValue2 = $vals['defaultValue2'];
      }
      if (isset($vals['values'])) {
        $this->values = $vals['values'];
      }
      if (isset($vals['control'])) {
        $this->control = $vals['control'];
      }
      if (isset($vals['includeAllChoices'])) {
        $this->includeAllChoices = $vals['includeAllChoices'];
      }
      if (isset($vals['constrainChoices'])) {
        $this->constrainChoices = $vals['constrainChoices'];
      }
      if (isset($vals['setVariable'])) {
        $this->setVariable = $vals['setVariable'];
      }
      if (isset($vals['setVariableValue'])) {
        $this->setVariableValue = $vals['setVariableValue'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['caption'])) {
        $this->caption = $vals['caption'];
      }
    }
  }

  public function getName() {
    return 'PromptFilter';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->formula);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->schema);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->op);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->defaultOn);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->defaultValue);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->defaultValue2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->values);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->control);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->includeAllChoices);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->constrainChoices);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->setVariable);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->setVariableValue);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->caption);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PromptFilter');
    if ($this->formula !== null) {
      $xfer += $output->writeFieldBegin('formula', TType::STRING, 1);
      $xfer += $output->writeString($this->formula);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->schema !== null) {
      $xfer += $output->writeFieldBegin('schema', TType::STRING, 2);
      $xfer += $output->writeString($this->schema);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->op !== null) {
      $xfer += $output->writeFieldBegin('op', TType::STRING, 3);
      $xfer += $output->writeString($this->op);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->defaultOn !== null) {
      $xfer += $output->writeFieldBegin('defaultOn', TType::STRING, 4);
      $xfer += $output->writeString($this->defaultOn);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->defaultValue !== null) {
      $xfer += $output->writeFieldBegin('defaultValue', TType::STRING, 5);
      $xfer += $output->writeString($this->defaultValue);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->defaultValue2 !== null) {
      $xfer += $output->writeFieldBegin('defaultValue2', TType::STRING, 6);
      $xfer += $output->writeString($this->defaultValue2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->values !== null) {
      $xfer += $output->writeFieldBegin('values', TType::STRING, 7);
      $xfer += $output->writeString($this->values);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->control !== null) {
      $xfer += $output->writeFieldBegin('control', TType::STRING, 8);
      $xfer += $output->writeString($this->control);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->includeAllChoices !== null) {
      $xfer += $output->writeFieldBegin('includeAllChoices', TType::STRING, 9);
      $xfer += $output->writeString($this->includeAllChoices);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->constrainChoices !== null) {
      $xfer += $output->writeFieldBegin('constrainChoices', TType::STRING, 10);
      $xfer += $output->writeString($this->constrainChoices);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->setVariable !== null) {
      $xfer += $output->writeFieldBegin('setVariable', TType::STRING, 11);
      $xfer += $output->writeString($this->setVariable);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->setVariableValue !== null) {
      $xfer += $output->writeFieldBegin('setVariableValue', TType::STRING, 12);
      $xfer += $output->writeString($this->setVariableValue);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::STRING, 13);
      $xfer += $output->writeString($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->caption !== null) {
      $xfer += $output->writeFieldBegin('caption', TType::STRING, 14);
      $xfer += $output->writeString($this->caption);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Prompt {
  static $_TSPEC;

  public $promptName = null;
  public $scope = null;
  public $promptFilters = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'promptName',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'scope',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'promptFilters',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'PromptFilter',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['promptName'])) {
        $this->promptName = $vals['promptName'];
      }
      if (isset($vals['scope'])) {
        $this->scope = $vals['scope'];
      }
      if (isset($vals['promptFilters'])) {
        $this->promptFilters = $vals['promptFilters'];
      }
    }
  }

  public function getName() {
    return 'Prompt';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->promptName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->scope);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->promptFilters = array();
            $_size28 = 0;
            $_etype31 = 0;
            $xfer += $input->readListBegin($_etype31, $_size28);
            for ($_i32 = 0; $_i32 < $_size28; ++$_i32)
            {
              $elem33 = null;
              $elem33 = new PromptFilter();
              $xfer += $elem33->read($input);
              $this->promptFilters []= $elem33;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Prompt');
    if ($this->promptName !== null) {
      $xfer += $output->writeFieldBegin('promptName', TType::STRING, 1);
      $xfer += $output->writeString($this->promptName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->scope !== null) {
      $xfer += $output->writeFieldBegin('scope', TType::STRING, 2);
      $xfer += $output->writeString($this->scope);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->promptFilters !== null) {
      if (!is_array($this->promptFilters)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('promptFilters', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRUCT, count($this->promptFilters));
        {
          foreach ($this->promptFilters as $iter34)
          {
            $xfer += $iter34->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Report {
  static $_TSPEC;

  public $reportName = null;
  public $reportSql = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'reportName',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'reportSql',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['reportName'])) {
        $this->reportName = $vals['reportName'];
      }
      if (isset($vals['reportSql'])) {
        $this->reportSql = $vals['reportSql'];
      }
    }
  }

  public function getName() {
    return 'Report';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->reportName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->reportSql);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Report');
    if ($this->reportName !== null) {
      $xfer += $output->writeFieldBegin('reportName', TType::STRING, 1);
      $xfer += $output->writeString($this->reportName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->reportSql !== null) {
      $xfer += $output->writeFieldBegin('reportSql', TType::STRING, 2);
      $xfer += $output->writeString($this->reportSql);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Page {
  static $_TSPEC;

  public $pageName = null;
  public $prompts = null;
  public $reports = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'pageName',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'prompts',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::I32,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::I32,
            ),
          ),
        3 => array(
          'var' => 'reports',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::I32,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::I32,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['pageName'])) {
        $this->pageName = $vals['pageName'];
      }
      if (isset($vals['prompts'])) {
        $this->prompts = $vals['prompts'];
      }
      if (isset($vals['reports'])) {
        $this->reports = $vals['reports'];
      }
    }
  }

  public function getName() {
    return 'Page';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->pageName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::MAP) {
            $this->prompts = array();
            $_size35 = 0;
            $_ktype36 = 0;
            $_vtype37 = 0;
            $xfer += $input->readMapBegin($_ktype36, $_vtype37, $_size35);
            for ($_i39 = 0; $_i39 < $_size35; ++$_i39)
            {
              $key40 = '';
              $val41 = 0;
              $xfer += $input->readString($key40);
              $xfer += $input->readI32($val41);
              $this->prompts[$key40] = $val41;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::MAP) {
            $this->reports = array();
            $_size42 = 0;
            $_ktype43 = 0;
            $_vtype44 = 0;
            $xfer += $input->readMapBegin($_ktype43, $_vtype44, $_size42);
            for ($_i46 = 0; $_i46 < $_size42; ++$_i46)
            {
              $key47 = '';
              $val48 = 0;
              $xfer += $input->readString($key47);
              $xfer += $input->readI32($val48);
              $this->reports[$key47] = $val48;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Page');
    if ($this->pageName !== null) {
      $xfer += $output->writeFieldBegin('pageName', TType::STRING, 1);
      $xfer += $output->writeString($this->pageName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->prompts !== null) {
      if (!is_array($this->prompts)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('prompts', TType::MAP, 2);
      {
        $output->writeMapBegin(TType::STRING, TType::I32, count($this->prompts));
        {
          foreach ($this->prompts as $kiter49 => $viter50)
          {
            $xfer += $output->writeString($kiter49);
            $xfer += $output->writeI32($viter50);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->reports !== null) {
      if (!is_array($this->reports)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('reports', TType::MAP, 3);
      {
        $output->writeMapBegin(TType::STRING, TType::I32, count($this->reports));
        {
          foreach ($this->reports as $kiter51 => $viter52)
          {
            $xfer += $output->writeString($kiter51);
            $xfer += $output->writeI32($viter52);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class srcMetadataset {
  static $_TSPEC;

  public $cid = null;
  public $appName = null;
  public $style = null;
  public $subs = null;
  public $savedFilters = null;
  public $srcMetadata = null;
  public $prompt = null;
  public $report = null;
  public $page = null;
  public $updateInfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'cid',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'appName',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'style',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'subs',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::I32,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::I32,
            ),
          ),
        5 => array(
          'var' => 'savedFilters',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        6 => array(
          'var' => 'srcMetadata',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'prompt',
          'type' => TType::STRUCT,
          'class' => 'Prompt',
          ),
        8 => array(
          'var' => 'report',
          'type' => TType::STRUCT,
          'class' => 'Report',
          ),
        9 => array(
          'var' => 'page',
          'type' => TType::STRUCT,
          'class' => 'Page',
          ),
        10 => array(
          'var' => 'updateInfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['cid'])) {
        $this->cid = $vals['cid'];
      }
      if (isset($vals['appName'])) {
        $this->appName = $vals['appName'];
      }
      if (isset($vals['style'])) {
        $this->style = $vals['style'];
      }
      if (isset($vals['subs'])) {
        $this->subs = $vals['subs'];
      }
      if (isset($vals['savedFilters'])) {
        $this->savedFilters = $vals['savedFilters'];
      }
      if (isset($vals['srcMetadata'])) {
        $this->srcMetadata = $vals['srcMetadata'];
      }
      if (isset($vals['prompt'])) {
        $this->prompt = $vals['prompt'];
      }
      if (isset($vals['report'])) {
        $this->report = $vals['report'];
      }
      if (isset($vals['page'])) {
        $this->page = $vals['page'];
      }
      if (isset($vals['updateInfo'])) {
        $this->updateInfo = $vals['updateInfo'];
      }
    }
  }

  public function getName() {
    return 'srcMetadataset';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->appName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->style);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::MAP) {
            $this->subs = array();
            $_size53 = 0;
            $_ktype54 = 0;
            $_vtype55 = 0;
            $xfer += $input->readMapBegin($_ktype54, $_vtype55, $_size53);
            for ($_i57 = 0; $_i57 < $_size53; ++$_i57)
            {
              $key58 = '';
              $val59 = 0;
              $xfer += $input->readString($key58);
              $xfer += $input->readI32($val59);
              $this->subs[$key58] = $val59;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::MAP) {
            $this->savedFilters = array();
            $_size60 = 0;
            $_ktype61 = 0;
            $_vtype62 = 0;
            $xfer += $input->readMapBegin($_ktype61, $_vtype62, $_size60);
            for ($_i64 = 0; $_i64 < $_size60; ++$_i64)
            {
              $key65 = '';
              $val66 = '';
              $xfer += $input->readString($key65);
              $xfer += $input->readString($val66);
              $this->savedFilters[$key65] = $val66;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->srcMetadata);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRUCT) {
            $this->prompt = new Prompt();
            $xfer += $this->prompt->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRUCT) {
            $this->report = new Report();
            $xfer += $this->report->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRUCT) {
            $this->page = new Page();
            $xfer += $this->page->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->updateInfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('srcMetadataset');
    if ($this->cid !== null) {
      $xfer += $output->writeFieldBegin('cid', TType::I32, 1);
      $xfer += $output->writeI32($this->cid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->appName !== null) {
      $xfer += $output->writeFieldBegin('appName', TType::STRING, 2);
      $xfer += $output->writeString($this->appName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->style !== null) {
      $xfer += $output->writeFieldBegin('style', TType::STRING, 3);
      $xfer += $output->writeString($this->style);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->subs !== null) {
      if (!is_array($this->subs)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('subs', TType::MAP, 4);
      {
        $output->writeMapBegin(TType::STRING, TType::I32, count($this->subs));
        {
          foreach ($this->subs as $kiter67 => $viter68)
          {
            $xfer += $output->writeString($kiter67);
            $xfer += $output->writeI32($viter68);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->savedFilters !== null) {
      if (!is_array($this->savedFilters)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('savedFilters', TType::MAP, 5);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->savedFilters));
        {
          foreach ($this->savedFilters as $kiter69 => $viter70)
          {
            $xfer += $output->writeString($kiter69);
            $xfer += $output->writeString($viter70);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->srcMetadata !== null) {
      $xfer += $output->writeFieldBegin('srcMetadata', TType::STRING, 6);
      $xfer += $output->writeString($this->srcMetadata);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->prompt !== null) {
      if (!is_object($this->prompt)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('prompt', TType::STRUCT, 7);
      $xfer += $this->prompt->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->report !== null) {
      if (!is_object($this->report)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('report', TType::STRUCT, 8);
      $xfer += $this->report->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->page !== null) {
      if (!is_object($this->page)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('page', TType::STRUCT, 9);
      $xfer += $this->page->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->updateInfo !== null) {
      $xfer += $output->writeFieldBegin('updateInfo', TType::STRING, 10);
      $xfer += $output->writeString($this->updateInfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class InvalidValueException extends TException {
  static $_TSPEC;

  public $error_code = null;
  public $error_msg = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'error_code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'error_msg',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['error_code'])) {
        $this->error_code = $vals['error_code'];
      }
      if (isset($vals['error_msg'])) {
        $this->error_msg = $vals['error_msg'];
      }
    }
  }

  public function getName() {
    return 'InvalidValueException';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->error_code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->error_msg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('InvalidValueException');
    if ($this->error_code !== null) {
      $xfer += $output->writeFieldBegin('error_code', TType::I32, 1);
      $xfer += $output->writeI32($this->error_code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error_msg !== null) {
      $xfer += $output->writeFieldBegin('error_msg', TType::STRING, 2);
      $xfer += $output->writeString($this->error_msg);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

?>
