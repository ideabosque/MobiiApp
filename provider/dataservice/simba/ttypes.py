#
# Autogenerated by Thrift Compiler (0.7.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

from thrift.Thrift import *

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class srcDataset:
  """
  Attributes:
   - appName
   - requestxmlRaw
   - simbaxmlRaw
   - viewName
   - viewType
   - dataxmlRaw
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'appName', None, None, ), # 1
    (2, TType.STRING, 'requestxmlRaw', None, None, ), # 2
    (3, TType.STRING, 'simbaxmlRaw', None, None, ), # 3
    (4, TType.STRING, 'viewName', None, None, ), # 4
    (5, TType.STRING, 'viewType', None, None, ), # 5
    (6, TType.STRING, 'dataxmlRaw', None, None, ), # 6
  )

  def __init__(self, appName=None, requestxmlRaw=None, simbaxmlRaw=None, viewName=None, viewType=None, dataxmlRaw=None,):
    self.appName = appName
    self.requestxmlRaw = requestxmlRaw
    self.simbaxmlRaw = simbaxmlRaw
    self.viewName = viewName
    self.viewType = viewType
    self.dataxmlRaw = dataxmlRaw

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.appName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.requestxmlRaw = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.simbaxmlRaw = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.viewName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.viewType = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.dataxmlRaw = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('srcDataset')
    if self.appName is not None:
      oprot.writeFieldBegin('appName', TType.STRING, 1)
      oprot.writeString(self.appName)
      oprot.writeFieldEnd()
    if self.requestxmlRaw is not None:
      oprot.writeFieldBegin('requestxmlRaw', TType.STRING, 2)
      oprot.writeString(self.requestxmlRaw)
      oprot.writeFieldEnd()
    if self.simbaxmlRaw is not None:
      oprot.writeFieldBegin('simbaxmlRaw', TType.STRING, 3)
      oprot.writeString(self.simbaxmlRaw)
      oprot.writeFieldEnd()
    if self.viewName is not None:
      oprot.writeFieldBegin('viewName', TType.STRING, 4)
      oprot.writeString(self.viewName)
      oprot.writeFieldEnd()
    if self.viewType is not None:
      oprot.writeFieldBegin('viewType', TType.STRING, 5)
      oprot.writeString(self.viewType)
      oprot.writeFieldEnd()
    if self.dataxmlRaw is not None:
      oprot.writeFieldBegin('dataxmlRaw', TType.STRING, 6)
      oprot.writeString(self.dataxmlRaw)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class srcQueryset:
  """
  Attributes:
   - appName
   - savedFilters
   - prompts
   - columnSelector
   - drillColumn
   - srcXml
   - viewName
   - viewType
   - sql
   - resultXml
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'appName', None, None, ), # 1
    (2, TType.MAP, 'savedFilters', (TType.STRING,None,TType.STRING,None), None, ), # 2
    (3, TType.LIST, 'prompts', (TType.MAP,(TType.STRING,None,TType.STRING,None)), None, ), # 3
    (4, TType.MAP, 'columnSelector', (TType.STRING,None,TType.STRING,None), None, ), # 4
    (5, TType.MAP, 'drillColumn', (TType.STRING,None,TType.STRING,None), None, ), # 5
    (6, TType.STRING, 'srcXml', None, None, ), # 6
    (7, TType.STRING, 'viewName', None, None, ), # 7
    (8, TType.STRING, 'viewType', None, None, ), # 8
    (9, TType.STRING, 'sql', None, None, ), # 9
    (10, TType.STRING, 'resultXml', None, None, ), # 10
  )

  def __init__(self, appName=None, savedFilters=None, prompts=None, columnSelector=None, drillColumn=None, srcXml=None, viewName=None, viewType=None, sql=None, resultXml=None,):
    self.appName = appName
    self.savedFilters = savedFilters
    self.prompts = prompts
    self.columnSelector = columnSelector
    self.drillColumn = drillColumn
    self.srcXml = srcXml
    self.viewName = viewName
    self.viewType = viewType
    self.sql = sql
    self.resultXml = resultXml

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.appName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.MAP:
          self.savedFilters = {}
          (_ktype1, _vtype2, _size0 ) = iprot.readMapBegin() 
          for _i4 in xrange(_size0):
            _key5 = iprot.readString();
            _val6 = iprot.readString();
            self.savedFilters[_key5] = _val6
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.prompts = []
          (_etype10, _size7) = iprot.readListBegin()
          for _i11 in xrange(_size7):
            _elem12 = {}
            (_ktype14, _vtype15, _size13 ) = iprot.readMapBegin() 
            for _i17 in xrange(_size13):
              _key18 = iprot.readString();
              _val19 = iprot.readString();
              _elem12[_key18] = _val19
            iprot.readMapEnd()
            self.prompts.append(_elem12)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.MAP:
          self.columnSelector = {}
          (_ktype21, _vtype22, _size20 ) = iprot.readMapBegin() 
          for _i24 in xrange(_size20):
            _key25 = iprot.readString();
            _val26 = iprot.readString();
            self.columnSelector[_key25] = _val26
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.MAP:
          self.drillColumn = {}
          (_ktype28, _vtype29, _size27 ) = iprot.readMapBegin() 
          for _i31 in xrange(_size27):
            _key32 = iprot.readString();
            _val33 = iprot.readString();
            self.drillColumn[_key32] = _val33
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.srcXml = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.viewName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.viewType = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.sql = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.resultXml = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('srcQueryset')
    if self.appName is not None:
      oprot.writeFieldBegin('appName', TType.STRING, 1)
      oprot.writeString(self.appName)
      oprot.writeFieldEnd()
    if self.savedFilters is not None:
      oprot.writeFieldBegin('savedFilters', TType.MAP, 2)
      oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.savedFilters))
      for kiter34,viter35 in self.savedFilters.items():
        oprot.writeString(kiter34)
        oprot.writeString(viter35)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.prompts is not None:
      oprot.writeFieldBegin('prompts', TType.LIST, 3)
      oprot.writeListBegin(TType.MAP, len(self.prompts))
      for iter36 in self.prompts:
        oprot.writeMapBegin(TType.STRING, TType.STRING, len(iter36))
        for kiter37,viter38 in iter36.items():
          oprot.writeString(kiter37)
          oprot.writeString(viter38)
        oprot.writeMapEnd()
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.columnSelector is not None:
      oprot.writeFieldBegin('columnSelector', TType.MAP, 4)
      oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.columnSelector))
      for kiter39,viter40 in self.columnSelector.items():
        oprot.writeString(kiter39)
        oprot.writeString(viter40)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.drillColumn is not None:
      oprot.writeFieldBegin('drillColumn', TType.MAP, 5)
      oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.drillColumn))
      for kiter41,viter42 in self.drillColumn.items():
        oprot.writeString(kiter41)
        oprot.writeString(viter42)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.srcXml is not None:
      oprot.writeFieldBegin('srcXml', TType.STRING, 6)
      oprot.writeString(self.srcXml)
      oprot.writeFieldEnd()
    if self.viewName is not None:
      oprot.writeFieldBegin('viewName', TType.STRING, 7)
      oprot.writeString(self.viewName)
      oprot.writeFieldEnd()
    if self.viewType is not None:
      oprot.writeFieldBegin('viewType', TType.STRING, 8)
      oprot.writeString(self.viewType)
      oprot.writeFieldEnd()
    if self.sql is not None:
      oprot.writeFieldBegin('sql', TType.STRING, 9)
      oprot.writeString(self.sql)
      oprot.writeFieldEnd()
    if self.resultXml is not None:
      oprot.writeFieldBegin('resultXml', TType.STRING, 10)
      oprot.writeString(self.resultXml)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class dataService_InvalidValueException(Exception):
  """
  Attributes:
   - error_code
   - error_msg
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'error_code', None, None, ), # 1
    (2, TType.STRING, 'error_msg', None, None, ), # 2
  )

  def __init__(self, error_code=None, error_msg=None,):
    self.error_code = error_code
    self.error_msg = error_msg

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.error_code = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.error_msg = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('dataService_InvalidValueException')
    if self.error_code is not None:
      oprot.writeFieldBegin('error_code', TType.I32, 1)
      oprot.writeI32(self.error_code)
      oprot.writeFieldEnd()
    if self.error_msg is not None:
      oprot.writeFieldBegin('error_msg', TType.STRING, 2)
      oprot.writeString(self.error_msg)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __str__(self):
    return repr(self)

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
