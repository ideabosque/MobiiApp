#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.7.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

import MetadataService
from ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '  void ping()'
  print '   getTokens()'
  print '  void delToken( paths)'
  print '   getSchemas(string path)'
  print '   getColumns(string schemaName, string path)'
  print '  string setSchema(string path, Schema schema, string uid)'
  print '  string setColumn(string schemaName, Column column, string path, string uid)'
  print '  string addSchema(string path, Schema schema, string uid)'
  print '  string addColumn(string schemaName, Column column, string path, string uid)'
  print '  string delSchema(string path, Schema schema, string uid)'
  print '  string delColumn(string schemaName, Column column, string path, string uid)'
  print '  string saveMetadata(string path, string uid)'
  print '  string editMetadata(srcMetadataset m)'
  print '  string convert_metadata(srcMetadataset m)'
  print '  Prompt loadPromptDetails(string simbaXml)'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = MetadataService.Client(protocol)
transport.open()

if cmd == 'ping':
  if len(args) != 0:
    print 'ping requires 0 args'
    sys.exit(1)
  pp.pprint(client.ping())

elif cmd == 'getTokens':
  if len(args) != 0:
    print 'getTokens requires 0 args'
    sys.exit(1)
  pp.pprint(client.getTokens())

elif cmd == 'delToken':
  if len(args) != 1:
    print 'delToken requires 1 args'
    sys.exit(1)
  pp.pprint(client.delToken(eval(args[0]),))

elif cmd == 'getSchemas':
  if len(args) != 1:
    print 'getSchemas requires 1 args'
    sys.exit(1)
  pp.pprint(client.getSchemas(args[0],))

elif cmd == 'getColumns':
  if len(args) != 2:
    print 'getColumns requires 2 args'
    sys.exit(1)
  pp.pprint(client.getColumns(args[0],args[1],))

elif cmd == 'setSchema':
  if len(args) != 3:
    print 'setSchema requires 3 args'
    sys.exit(1)
  pp.pprint(client.setSchema(args[0],eval(args[1]),args[2],))

elif cmd == 'setColumn':
  if len(args) != 4:
    print 'setColumn requires 4 args'
    sys.exit(1)
  pp.pprint(client.setColumn(args[0],eval(args[1]),args[2],args[3],))

elif cmd == 'addSchema':
  if len(args) != 3:
    print 'addSchema requires 3 args'
    sys.exit(1)
  pp.pprint(client.addSchema(args[0],eval(args[1]),args[2],))

elif cmd == 'addColumn':
  if len(args) != 4:
    print 'addColumn requires 4 args'
    sys.exit(1)
  pp.pprint(client.addColumn(args[0],eval(args[1]),args[2],args[3],))

elif cmd == 'delSchema':
  if len(args) != 3:
    print 'delSchema requires 3 args'
    sys.exit(1)
  pp.pprint(client.delSchema(args[0],eval(args[1]),args[2],))

elif cmd == 'delColumn':
  if len(args) != 4:
    print 'delColumn requires 4 args'
    sys.exit(1)
  pp.pprint(client.delColumn(args[0],eval(args[1]),args[2],args[3],))

elif cmd == 'saveMetadata':
  if len(args) != 2:
    print 'saveMetadata requires 2 args'
    sys.exit(1)
  pp.pprint(client.saveMetadata(args[0],args[1],))

elif cmd == 'editMetadata':
  if len(args) != 1:
    print 'editMetadata requires 1 args'
    sys.exit(1)
  pp.pprint(client.editMetadata(eval(args[0]),))

elif cmd == 'convert_metadata':
  if len(args) != 1:
    print 'convert_metadata requires 1 args'
    sys.exit(1)
  pp.pprint(client.convert_metadata(eval(args[0]),))

elif cmd == 'loadPromptDetails':
  if len(args) != 1:
    print 'loadPromptDetails requires 1 args'
    sys.exit(1)
  pp.pprint(client.loadPromptDetails(args[0],))

else:
  print 'Unrecognized method %s' % cmd
  sys.exit(1)

transport.close()
