#!/usr/bin/env python
# -*- coding: utf-8 -*- 

#
# Generated Wed Nov 09 10:00:31 2011 by generateDS.py version 2.6a.
#

import sys
import getopt
import re as re_

etree_ = None
Verbose_import_ = False
(   XMLParser_import_none, XMLParser_import_lxml,
    XMLParser_import_elementtree
    ) = range(3)
XMLParser_import_library = None
try:
    # lxml
    from lxml import etree as etree_
    XMLParser_import_library = XMLParser_import_lxml
    if Verbose_import_:
        print("running with lxml.etree")
except ImportError:
    try:
        # cElementTree from Python 2.5+
        import xml.etree.cElementTree as etree_
        XMLParser_import_library = XMLParser_import_elementtree
        if Verbose_import_:
            print("running with cElementTree on Python 2.5+")
    except ImportError:
        try:
            # ElementTree from Python 2.5+
            import xml.etree.ElementTree as etree_
            XMLParser_import_library = XMLParser_import_elementtree
            if Verbose_import_:
                print("running with ElementTree on Python 2.5+")
        except ImportError:
            try:
                # normal cElementTree install
                import cElementTree as etree_
                XMLParser_import_library = XMLParser_import_elementtree
                if Verbose_import_:
                    print("running with cElementTree")
            except ImportError:
                try:
                    # normal ElementTree install
                    import elementtree.ElementTree as etree_
                    XMLParser_import_library = XMLParser_import_elementtree
                    if Verbose_import_:
                        print("running with ElementTree")
                except ImportError:
                    raise ImportError("Failed to import ElementTree from any known place")

def parsexml_(*args, **kwargs):
    if (XMLParser_import_library == XMLParser_import_lxml and
        'parser' not in kwargs):
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        kwargs['parser'] = etree_.ETCompatXMLParser()
    doc = etree_.parse(*args, **kwargs)
    return doc

#
# User methods
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError, exp:

    class GeneratedsSuper(object):
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_integer_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    fvalue = float(value)
                except (TypeError, ValueError), exp:
                    raise_parse_error(node, 'Requires sequence of integers')
            return input_data
        def gds_format_float(self, input_data, input_name=''):
            return '%f' % input_data
        def gds_validate_float(self, input_data, node, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_float_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    fvalue = float(value)
                except (TypeError, ValueError), exp:
                    raise_parse_error(node, 'Requires sequence of floats')
            return input_data
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_double_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    fvalue = float(value)
                except (TypeError, ValueError), exp:
                    raise_parse_error(node, 'Requires sequence of doubles')
            return input_data
        def gds_format_boolean(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_boolean(self, input_data, node, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_boolean_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(node, 'Requires sequence of booleans ("true", "1", "false", "0")')
            return input_data
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'ascii'
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
STRING_CLEANUP_PAT = re_.compile(r"[\n\r\s]+")

#
# Support/utility functions.
#

def showIndent(outfile, level):
    for idx in range(level):
        outfile.write('    ')

def quote_xml(inStr):
    if not inStr:
        return ''
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1

def quote_attrib(inStr):
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1

def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1

def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text

def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass

def raise_parse_error(node, msg):
    if XMLParser_import_library == XMLParser_import_lxml:
        msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    else:
        msg = '%s (element %s)' % (msg, node.tag, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip(): 
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(outfile, level, namespace,name)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (self.name, self.value, self.name))
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s", "%s"),\n' % \
                (self.category, self.content_type, self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s", "%s"),\n' % \
                (self.category, self.content_type, self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s",\n' % \
                (self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0):
        self.name = name
        self.data_type = data_type
        self.container = container
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container

def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#

class metadata(GeneratedsSuper):
    """Comment describing your root element"""
    subclass = None
    superclass = None
    def __init__(self, schema=None):
        if schema is None:
            self.schema = []
        else:
            self.schema = schema
    def factory(*args_, **kwargs_):
        if metadata.subclass:
            return metadata.subclass(*args_, **kwargs_)
        else:
            return metadata(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_schema(self): return self.schema
    def set_schema(self, schema): self.schema = schema
    def add_schema(self, value): self.schema.append(value)
    def insert_schema(self, index, value): self.schema[index] = value
    def export(self, outfile, level, namespace_='', name_='metadata', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='metadata')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='metadata'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='metadata', fromsubclass_=False):
        for schema_ in self.schema:
            schema_.export(outfile, level, namespace_, name_='schema')
    def hasContent_(self):
        if (
            self.schema
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='metadata'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('schema=[\n')
        level += 1
        for schema_ in self.schema:
            showIndent(outfile, level)
            outfile.write('model_.schema(\n')
            schema_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'schema':
            obj_ = schema.factory()
            obj_.build(child_)
            self.schema.append(obj_)
# end class metadata


class schema(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, schemaDesc=None, schemaName=None, column=None):
        self.schemaDesc = _cast(None, schemaDesc)
        self.schemaName = _cast(None, schemaName)
        if column is None:
            self.column = []
        else:
            self.column = column
    def factory(*args_, **kwargs_):
        if schema.subclass:
            return schema.subclass(*args_, **kwargs_)
        else:
            return schema(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_column(self): return self.column
    def set_column(self, column): self.column = column
    def add_column(self, value): self.column.append(value)
    def insert_column(self, index, value): self.column[index] = value
    def get_schemaDesc(self): return self.schemaDesc
    def set_schemaDesc(self, schemaDesc): self.schemaDesc = schemaDesc
    def get_schemaName(self): return self.schemaName
    def set_schemaName(self, schemaName): self.schemaName = schemaName
    def export(self, outfile, level, namespace_='', name_='schema', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='schema')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='schema'):
        if self.schemaDesc is not None and 'schemaDesc' not in already_processed:
            already_processed.append('schemaDesc')
            outfile.write(' schemaDesc=%s' % (self.gds_format_string(quote_attrib(self.schemaDesc).encode(ExternalEncoding), input_name='schemaDesc'), ))
        if self.schemaName is not None and 'schemaName' not in already_processed:
            already_processed.append('schemaName')
            outfile.write(' schemaName=%s' % (self.gds_format_string(quote_attrib(self.schemaName).encode(ExternalEncoding), input_name='schemaName'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='schema', fromsubclass_=False):
        for column_ in self.column:
            column_.export(outfile, level, namespace_, name_='column')
    def hasContent_(self):
        if (
            self.column
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='schema'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.schemaDesc is not None and 'schemaDesc' not in already_processed:
            already_processed.append('schemaDesc')
            showIndent(outfile, level)
            outfile.write('schemaDesc = "%s",\n' % (self.schemaDesc,))
        if self.schemaName is not None and 'schemaName' not in already_processed:
            already_processed.append('schemaName')
            showIndent(outfile, level)
            outfile.write('schemaName = "%s",\n' % (self.schemaName,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('column=[\n')
        level += 1
        for column_ in self.column:
            showIndent(outfile, level)
            outfile.write('model_.column(\n')
            column_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('schemaDesc', node)
        if value is not None and 'schemaDesc' not in already_processed:
            already_processed.append('schemaDesc')
            self.schemaDesc = value
        value = find_attr_value_('schemaName', node)
        if value is not None and 'schemaName' not in already_processed:
            already_processed.append('schemaName')
            self.schemaName = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'column':
            obj_ = column.factory()
            obj_.build(child_)
            self.column.append(obj_)
# end class schema


class column(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, nullable=None, dataType=None, columnName=None, columnDesc=None, aggregateable=None, columnAlias=None, aggrRule=None, drillColumn=None, table=None, dimColumn=None):
        self.nullable = _cast(None, nullable)
        self.dataType = _cast(None, dataType)
        self.columnName = _cast(None, columnName)
        self.columnDesc = _cast(None, columnDesc)
        self.aggregateable = _cast(None, aggregateable)
        self.columnAlias = _cast(None, columnAlias)
        self.aggrRule = _cast(None, aggrRule)
        if drillColumn is None:
            self.drillColumn = []
        else:
            self.drillColumn = drillColumn
        if table is None:
            self.table = []
        else:
            self.table = table
        if dimColumn is None:
            self.dimColumn = []
        else:
            self.dimColumn = dimColumn
    def factory(*args_, **kwargs_):
        if column.subclass:
            return column.subclass(*args_, **kwargs_)
        else:
            return column(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_drillColumn(self): return self.drillColumn
    def set_drillColumn(self, drillColumn): self.drillColumn = drillColumn
    def add_drillColumn(self, value): self.drillColumn.append(value)
    def insert_drillColumn(self, index, value): self.drillColumn[index] = value
    def get_table(self): return self.table
    def set_table(self, table): self.table = table
    def add_table(self, value): self.table.append(value)
    def insert_table(self, index, value): self.table[index] = value
    def get_dimColumn(self): return self.dimColumn
    def set_dimColumn(self, dimColumn): self.dimColumn = dimColumn
    def add_dimColumn(self, value): self.dimColumn.append(value)
    def insert_dimColumn(self, index, value): self.dimColumn[index] = value
    def get_nullable(self): return self.nullable
    def set_nullable(self, nullable): self.nullable = nullable
    def get_dataType(self): return self.dataType
    def set_dataType(self, dataType): self.dataType = dataType
    def get_columnName(self): return self.columnName
    def set_columnName(self, columnName): self.columnName = columnName
    def get_columnDesc(self): return self.columnDesc
    def set_columnDesc(self, columnDesc): self.columnDesc = columnDesc
    def get_aggregateable(self): return self.aggregateable
    def set_aggregateable(self, aggregateable): self.aggregateable = aggregateable
    def get_columnAlias(self): return self.columnAlias
    def set_columnAlias(self, columnAlias): self.columnAlias = columnAlias
    def get_aggrRule(self): return self.aggrRule
    def set_aggrRule(self, aggrRule): self.aggrRule = aggrRule
    def export(self, outfile, level, namespace_='', name_='column', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='column')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='column'):
        if self.nullable is not None and 'nullable' not in already_processed:
            already_processed.append('nullable')
            outfile.write(' nullable=%s' % (self.gds_format_string(quote_attrib(self.nullable).encode(ExternalEncoding), input_name='nullable'), ))
        if self.dataType is not None and 'dataType' not in already_processed:
            already_processed.append('dataType')
            outfile.write(' dataType=%s' % (self.gds_format_string(quote_attrib(self.dataType).encode(ExternalEncoding), input_name='dataType'), ))
        if self.columnName is not None and 'columnName' not in already_processed:
            already_processed.append('columnName')
            outfile.write(' columnName=%s' % (self.gds_format_string(quote_attrib(self.columnName).encode(ExternalEncoding), input_name='columnName'), ))
        if self.columnDesc is not None and 'columnDesc' not in already_processed:
            already_processed.append('columnDesc')
            outfile.write(' columnDesc=%s' % (self.gds_format_string(quote_attrib(self.columnDesc).encode(ExternalEncoding), input_name='columnDesc'), ))
        if self.aggregateable is not None and 'aggregateable' not in already_processed:
            already_processed.append('aggregateable')
            outfile.write(' aggregateable=%s' % (self.gds_format_string(quote_attrib(self.aggregateable).encode(ExternalEncoding), input_name='aggregateable'), ))
        if self.columnAlias is not None and 'columnAlias' not in already_processed:
            already_processed.append('columnAlias')
            outfile.write(' columnAlias=%s' % (self.gds_format_string(quote_attrib(self.columnAlias).encode(ExternalEncoding), input_name='columnAlias'), ))
        if self.aggrRule is not None and 'aggrRule' not in already_processed:
            already_processed.append('aggrRule')
            outfile.write(' aggrRule=%s' % (self.gds_format_string(quote_attrib(self.aggrRule).encode(ExternalEncoding), input_name='aggrRule'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='column', fromsubclass_=False):
        for drillColumn_ in self.drillColumn:
            drillColumn_.export(outfile, level, namespace_, name_='drillColumn')
        for table_ in self.table:
            table_.export(outfile, level, namespace_, name_='table')
        for dimColumn_ in self.dimColumn:
            dimColumn_.export(outfile, level, namespace_, name_='dimColumn')
    def hasContent_(self):
        if (
            self.drillColumn or
            self.table or
            self.dimColumn
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='column'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.nullable is not None and 'nullable' not in already_processed:
            already_processed.append('nullable')
            showIndent(outfile, level)
            outfile.write('nullable = "%s",\n' % (self.nullable,))
        if self.dataType is not None and 'dataType' not in already_processed:
            already_processed.append('dataType')
            showIndent(outfile, level)
            outfile.write('dataType = "%s",\n' % (self.dataType,))
        if self.columnName is not None and 'columnName' not in already_processed:
            already_processed.append('columnName')
            showIndent(outfile, level)
            outfile.write('columnName = "%s",\n' % (self.columnName,))
        if self.columnDesc is not None and 'columnDesc' not in already_processed:
            already_processed.append('columnDesc')
            showIndent(outfile, level)
            outfile.write('columnDesc = "%s",\n' % (self.columnDesc,))
        if self.aggregateable is not None and 'aggregateable' not in already_processed:
            already_processed.append('aggregateable')
            showIndent(outfile, level)
            outfile.write('aggregateable = "%s",\n' % (self.aggregateable,))
        if self.columnAlias is not None and 'columnAlias' not in already_processed:
            already_processed.append('columnAlias')
            showIndent(outfile, level)
            outfile.write('columnAlias = "%s",\n' % (self.columnAlias,))
        if self.aggrRule is not None and 'aggrRule' not in already_processed:
            already_processed.append('aggrRule')
            showIndent(outfile, level)
            outfile.write('aggrRule = "%s",\n' % (self.aggrRule,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('drillColumn=[\n')
        level += 1
        for drillColumn_ in self.drillColumn:
            showIndent(outfile, level)
            outfile.write('model_.drillColumn(\n')
            drillColumn_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('table=[\n')
        level += 1
        for table_ in self.table:
            showIndent(outfile, level)
            outfile.write('model_.table(\n')
            table_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('dimColumn=[\n')
        level += 1
        for dimColumn_ in self.dimColumn:
            showIndent(outfile, level)
            outfile.write('model_.dimColumn(\n')
            dimColumn_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('nullable', node)
        if value is not None and 'nullable' not in already_processed:
            already_processed.append('nullable')
            self.nullable = value
        value = find_attr_value_('dataType', node)
        if value is not None and 'dataType' not in already_processed:
            already_processed.append('dataType')
            self.dataType = value
        value = find_attr_value_('columnName', node)
        if value is not None and 'columnName' not in already_processed:
            already_processed.append('columnName')
            self.columnName = value
        value = find_attr_value_('columnDesc', node)
        if value is not None and 'columnDesc' not in already_processed:
            already_processed.append('columnDesc')
            self.columnDesc = value
        value = find_attr_value_('aggregateable', node)
        if value is not None and 'aggregateable' not in already_processed:
            already_processed.append('aggregateable')
            self.aggregateable = value
        value = find_attr_value_('columnAlias', node)
        if value is not None and 'columnAlias' not in already_processed:
            already_processed.append('columnAlias')
            self.columnAlias = value
        value = find_attr_value_('aggrRule', node)
        if value is not None and 'aggrRule' not in already_processed:
            already_processed.append('aggrRule')
            self.aggrRule = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'drillColumn':
            obj_ = drillColumn.factory()
            obj_.build(child_)
            self.drillColumn.append(obj_)
        elif nodeName_ == 'table':
            obj_ = table.factory()
            obj_.build(child_)
            self.table.append(obj_)
        elif nodeName_ == 'dimColumn':
            obj_ = dimColumn.factory()
            obj_.build(child_)
            self.dimColumn.append(obj_)
# end class column


class drillColumn(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, columnName=None, weight=None):
        self.columnName = _cast(None, columnName)
        self.weight = _cast(None, weight)
        pass
    def factory(*args_, **kwargs_):
        if drillColumn.subclass:
            return drillColumn.subclass(*args_, **kwargs_)
        else:
            return drillColumn(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_columnName(self): return self.columnName
    def set_columnName(self, columnName): self.columnName = columnName
    def get_weight(self): return self.weight
    def set_weight(self, weight): self.weight = weight
    def export(self, outfile, level, namespace_='', name_='drillColumn', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='drillColumn')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='drillColumn'):
        if self.columnName is not None and 'columnName' not in already_processed:
            already_processed.append('columnName')
            outfile.write(' columnName=%s' % (self.gds_format_string(quote_attrib(self.columnName).encode(ExternalEncoding), input_name='columnName'), ))
        if self.weight is not None and 'weight' not in already_processed:
            already_processed.append('weight')
            outfile.write(' weight=%s' % (self.gds_format_string(quote_attrib(self.weight).encode(ExternalEncoding), input_name='weight'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='drillColumn', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='drillColumn'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.columnName is not None and 'columnName' not in already_processed:
            already_processed.append('columnName')
            showIndent(outfile, level)
            outfile.write('columnName = "%s",\n' % (self.columnName,))
        if self.weight is not None and 'weight' not in already_processed:
            already_processed.append('weight')
            showIndent(outfile, level)
            outfile.write('weight = "%s",\n' % (self.weight,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('columnName', node)
        if value is not None and 'columnName' not in already_processed:
            already_processed.append('columnName')
            self.columnName = value
        value = find_attr_value_('weight', node)
        if value is not None and 'weight' not in already_processed:
            already_processed.append('weight')
            self.weight = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class drillColumn


class table(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, position=None, tableName=None):
        self.position = _cast(None, position)
        self.tableName = _cast(None, tableName)
        pass
    def factory(*args_, **kwargs_):
        if table.subclass:
            return table.subclass(*args_, **kwargs_)
        else:
            return table(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_position(self): return self.position
    def set_position(self, position): self.position = position
    def get_tableName(self): return self.tableName
    def set_tableName(self, tableName): self.tableName = tableName
    def export(self, outfile, level, namespace_='', name_='table', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='table')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='table'):
        if self.position is not None and 'position' not in already_processed:
            already_processed.append('position')
            outfile.write(' position=%s' % (self.gds_format_string(quote_attrib(self.position).encode(ExternalEncoding), input_name='position'), ))
        if self.tableName is not None and 'tableName' not in already_processed:
            already_processed.append('tableName')
            outfile.write(' tableName=%s' % (self.gds_format_string(quote_attrib(self.tableName).encode(ExternalEncoding), input_name='tableName'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='table', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='table'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.position is not None and 'position' not in already_processed:
            already_processed.append('position')
            showIndent(outfile, level)
            outfile.write('position = "%s",\n' % (self.position,))
        if self.tableName is not None and 'tableName' not in already_processed:
            already_processed.append('tableName')
            showIndent(outfile, level)
            outfile.write('tableName = "%s",\n' % (self.tableName,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('position', node)
        if value is not None and 'position' not in already_processed:
            already_processed.append('position')
            self.position = value
        value = find_attr_value_('tableName', node)
        if value is not None and 'tableName' not in already_processed:
            already_processed.append('tableName')
            self.tableName = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class table


class dimColumn(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, columnName=None):
        self.columnName = _cast(None, columnName)
        pass
    def factory(*args_, **kwargs_):
        if dimColumn.subclass:
            return dimColumn.subclass(*args_, **kwargs_)
        else:
            return dimColumn(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_columnName(self): return self.columnName
    def set_columnName(self, columnName): self.columnName = columnName
    def export(self, outfile, level, namespace_='', name_='dimColumn', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='dimColumn')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='dimColumn'):
        if self.columnName is not None and 'columnName' not in already_processed:
            already_processed.append('columnName')
            outfile.write(' columnName=%s' % (self.gds_format_string(quote_attrib(self.columnName).encode(ExternalEncoding), input_name='columnName'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='dimColumn', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='dimColumn'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.columnName is not None and 'columnName' not in already_processed:
            already_processed.append('columnName')
            showIndent(outfile, level)
            outfile.write('columnName = "%s",\n' % (self.columnName,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('columnName', node)
        if value is not None and 'columnName' not in already_processed:
            already_processed.append('columnName')
            self.columnName = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class dimColumn


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""

def usage():
    print USAGE_TEXT
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName):
    doc = parsexml_(inFileName)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'metadata'
        rootClass = metadata
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    sys.stdout.write('<?xml version="1.0" ?>\n')
    rootObj.export(sys.stdout, 0, name_=rootTag, 
        namespacedef_='')
    return rootObj


def parseString(inString):
    from StringIO import StringIO
    doc = parsexml_(StringIO(inString))
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'metadata'
        rootClass = metadata
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    sys.stdout.write('<?xml version="1.0" ?>\n')
    rootObj.export(sys.stdout, 0, name_="metadata",
        namespacedef_='')
    return rootObj


def parseLiteral(inFileName):
    doc = parsexml_(inFileName)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'metadata'
        rootClass = metadata
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    sys.stdout.write('#from metadata import *\n\n')
    sys.stdout.write('import metadata as model_\n\n')
    sys.stdout.write('rootObj = model_.rootTag(\n')
    rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
    sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "column",
    "dimColumn",
    "drillColumn",
    "metadata",
    "schema",
    "table"
    ]
