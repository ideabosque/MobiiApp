#
# Autogenerated by Thrift Compiler (0.7.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

from thrift.Thrift import *

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class DrillColumn:
  """
  Attributes:
   - columnName
   - weight
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'columnName', None, None, ), # 1
    (2, TType.STRING, 'weight', None, None, ), # 2
  )

  def __init__(self, columnName=None, weight=None,):
    self.columnName = columnName
    self.weight = weight

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.columnName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.weight = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DrillColumn')
    if self.columnName is not None:
      oprot.writeFieldBegin('columnName', TType.STRING, 1)
      oprot.writeString(self.columnName)
      oprot.writeFieldEnd()
    if self.weight is not None:
      oprot.writeFieldBegin('weight', TType.STRING, 2)
      oprot.writeString(self.weight)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Table:
  """
  Attributes:
   - tableName
   - position
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'tableName', None, None, ), # 1
    (2, TType.STRING, 'position', None, None, ), # 2
  )

  def __init__(self, tableName=None, position=None,):
    self.tableName = tableName
    self.position = position

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.tableName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.position = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Table')
    if self.tableName is not None:
      oprot.writeFieldBegin('tableName', TType.STRING, 1)
      oprot.writeString(self.tableName)
      oprot.writeFieldEnd()
    if self.position is not None:
      oprot.writeFieldBegin('position', TType.STRING, 2)
      oprot.writeString(self.position)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DimColumn:
  """
  Attributes:
   - columnName
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'columnName', None, None, ), # 1
  )

  def __init__(self, columnName=None,):
    self.columnName = columnName

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.columnName = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DimColumn')
    if self.columnName is not None:
      oprot.writeFieldBegin('columnName', TType.STRING, 1)
      oprot.writeString(self.columnName)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Column:
  """
  Attributes:
   - columnName
   - columnAlias
   - columnDesc
   - nullable
   - dataType
   - aggregateable
   - aggrRule
   - drillColumns
   - tables
   - dimColumns
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'columnName', None, None, ), # 1
    (2, TType.STRING, 'columnAlias', None, None, ), # 2
    (3, TType.STRING, 'columnDesc', None, None, ), # 3
    (4, TType.STRING, 'nullable', None, None, ), # 4
    (5, TType.STRING, 'dataType', None, None, ), # 5
    (6, TType.STRING, 'aggregateable', None, None, ), # 6
    (7, TType.STRING, 'aggrRule', None, None, ), # 7
    (8, TType.LIST, 'drillColumns', (TType.STRUCT,(DrillColumn, DrillColumn.thrift_spec)), None, ), # 8
    (9, TType.LIST, 'tables', (TType.STRUCT,(Table, Table.thrift_spec)), None, ), # 9
    (10, TType.LIST, 'dimColumns', (TType.STRUCT,(DimColumn, DimColumn.thrift_spec)), None, ), # 10
  )

  def __init__(self, columnName=None, columnAlias=None, columnDesc=None, nullable=None, dataType=None, aggregateable=None, aggrRule=None, drillColumns=None, tables=None, dimColumns=None,):
    self.columnName = columnName
    self.columnAlias = columnAlias
    self.columnDesc = columnDesc
    self.nullable = nullable
    self.dataType = dataType
    self.aggregateable = aggregateable
    self.aggrRule = aggrRule
    self.drillColumns = drillColumns
    self.tables = tables
    self.dimColumns = dimColumns

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.columnName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.columnAlias = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.columnDesc = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.nullable = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.dataType = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.aggregateable = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.aggrRule = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.LIST:
          self.drillColumns = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = DrillColumn()
            _elem5.read(iprot)
            self.drillColumns.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.LIST:
          self.tables = []
          (_etype9, _size6) = iprot.readListBegin()
          for _i10 in xrange(_size6):
            _elem11 = Table()
            _elem11.read(iprot)
            self.tables.append(_elem11)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.LIST:
          self.dimColumns = []
          (_etype15, _size12) = iprot.readListBegin()
          for _i16 in xrange(_size12):
            _elem17 = DimColumn()
            _elem17.read(iprot)
            self.dimColumns.append(_elem17)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Column')
    if self.columnName is not None:
      oprot.writeFieldBegin('columnName', TType.STRING, 1)
      oprot.writeString(self.columnName)
      oprot.writeFieldEnd()
    if self.columnAlias is not None:
      oprot.writeFieldBegin('columnAlias', TType.STRING, 2)
      oprot.writeString(self.columnAlias)
      oprot.writeFieldEnd()
    if self.columnDesc is not None:
      oprot.writeFieldBegin('columnDesc', TType.STRING, 3)
      oprot.writeString(self.columnDesc)
      oprot.writeFieldEnd()
    if self.nullable is not None:
      oprot.writeFieldBegin('nullable', TType.STRING, 4)
      oprot.writeString(self.nullable)
      oprot.writeFieldEnd()
    if self.dataType is not None:
      oprot.writeFieldBegin('dataType', TType.STRING, 5)
      oprot.writeString(self.dataType)
      oprot.writeFieldEnd()
    if self.aggregateable is not None:
      oprot.writeFieldBegin('aggregateable', TType.STRING, 6)
      oprot.writeString(self.aggregateable)
      oprot.writeFieldEnd()
    if self.aggrRule is not None:
      oprot.writeFieldBegin('aggrRule', TType.STRING, 7)
      oprot.writeString(self.aggrRule)
      oprot.writeFieldEnd()
    if self.drillColumns is not None:
      oprot.writeFieldBegin('drillColumns', TType.LIST, 8)
      oprot.writeListBegin(TType.STRUCT, len(self.drillColumns))
      for iter18 in self.drillColumns:
        iter18.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.tables is not None:
      oprot.writeFieldBegin('tables', TType.LIST, 9)
      oprot.writeListBegin(TType.STRUCT, len(self.tables))
      for iter19 in self.tables:
        iter19.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.dimColumns is not None:
      oprot.writeFieldBegin('dimColumns', TType.LIST, 10)
      oprot.writeListBegin(TType.STRUCT, len(self.dimColumns))
      for iter20 in self.dimColumns:
        iter20.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Schema:
  """
  Attributes:
   - schemaName
   - schemaDesc
   - columns
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'schemaName', None, None, ), # 1
    (2, TType.STRING, 'schemaDesc', None, None, ), # 2
    (3, TType.LIST, 'columns', (TType.STRUCT,(Column, Column.thrift_spec)), None, ), # 3
  )

  def __init__(self, schemaName=None, schemaDesc=None, columns=None,):
    self.schemaName = schemaName
    self.schemaDesc = schemaDesc
    self.columns = columns

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.schemaName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.schemaDesc = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.columns = []
          (_etype24, _size21) = iprot.readListBegin()
          for _i25 in xrange(_size21):
            _elem26 = Column()
            _elem26.read(iprot)
            self.columns.append(_elem26)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Schema')
    if self.schemaName is not None:
      oprot.writeFieldBegin('schemaName', TType.STRING, 1)
      oprot.writeString(self.schemaName)
      oprot.writeFieldEnd()
    if self.schemaDesc is not None:
      oprot.writeFieldBegin('schemaDesc', TType.STRING, 2)
      oprot.writeString(self.schemaDesc)
      oprot.writeFieldEnd()
    if self.columns is not None:
      oprot.writeFieldBegin('columns', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.columns))
      for iter27 in self.columns:
        iter27.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PromptFilter:
  """
  Attributes:
   - formula
   - schema
   - op
   - defaultOn
   - defaultValue
   - defaultValue2
   - values
   - control
   - includeAllChoices
   - constrainChoices
   - setVariable
   - setVariableValue
   - type
   - caption
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'formula', None, None, ), # 1
    (2, TType.STRING, 'schema', None, None, ), # 2
    (3, TType.STRING, 'op', None, None, ), # 3
    (4, TType.STRING, 'defaultOn', None, None, ), # 4
    (5, TType.STRING, 'defaultValue', None, None, ), # 5
    (6, TType.STRING, 'defaultValue2', None, None, ), # 6
    (7, TType.STRING, 'values', None, None, ), # 7
    (8, TType.STRING, 'control', None, None, ), # 8
    (9, TType.STRING, 'includeAllChoices', None, None, ), # 9
    (10, TType.STRING, 'constrainChoices', None, None, ), # 10
    (11, TType.STRING, 'setVariable', None, None, ), # 11
    (12, TType.STRING, 'setVariableValue', None, None, ), # 12
    (13, TType.STRING, 'type', None, None, ), # 13
    (14, TType.STRING, 'caption', None, None, ), # 14
  )

  def __init__(self, formula=None, schema=None, op=None, defaultOn=None, defaultValue=None, defaultValue2=None, values=None, control=None, includeAllChoices=None, constrainChoices=None, setVariable=None, setVariableValue=None, type=None, caption=None,):
    self.formula = formula
    self.schema = schema
    self.op = op
    self.defaultOn = defaultOn
    self.defaultValue = defaultValue
    self.defaultValue2 = defaultValue2
    self.values = values
    self.control = control
    self.includeAllChoices = includeAllChoices
    self.constrainChoices = constrainChoices
    self.setVariable = setVariable
    self.setVariableValue = setVariableValue
    self.type = type
    self.caption = caption

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.formula = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.schema = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.op = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.defaultOn = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.defaultValue = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.defaultValue2 = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.values = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.control = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.includeAllChoices = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.constrainChoices = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.setVariable = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.setVariableValue = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRING:
          self.type = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.STRING:
          self.caption = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PromptFilter')
    if self.formula is not None:
      oprot.writeFieldBegin('formula', TType.STRING, 1)
      oprot.writeString(self.formula)
      oprot.writeFieldEnd()
    if self.schema is not None:
      oprot.writeFieldBegin('schema', TType.STRING, 2)
      oprot.writeString(self.schema)
      oprot.writeFieldEnd()
    if self.op is not None:
      oprot.writeFieldBegin('op', TType.STRING, 3)
      oprot.writeString(self.op)
      oprot.writeFieldEnd()
    if self.defaultOn is not None:
      oprot.writeFieldBegin('defaultOn', TType.STRING, 4)
      oprot.writeString(self.defaultOn)
      oprot.writeFieldEnd()
    if self.defaultValue is not None:
      oprot.writeFieldBegin('defaultValue', TType.STRING, 5)
      oprot.writeString(self.defaultValue)
      oprot.writeFieldEnd()
    if self.defaultValue2 is not None:
      oprot.writeFieldBegin('defaultValue2', TType.STRING, 6)
      oprot.writeString(self.defaultValue2)
      oprot.writeFieldEnd()
    if self.values is not None:
      oprot.writeFieldBegin('values', TType.STRING, 7)
      oprot.writeString(self.values)
      oprot.writeFieldEnd()
    if self.control is not None:
      oprot.writeFieldBegin('control', TType.STRING, 8)
      oprot.writeString(self.control)
      oprot.writeFieldEnd()
    if self.includeAllChoices is not None:
      oprot.writeFieldBegin('includeAllChoices', TType.STRING, 9)
      oprot.writeString(self.includeAllChoices)
      oprot.writeFieldEnd()
    if self.constrainChoices is not None:
      oprot.writeFieldBegin('constrainChoices', TType.STRING, 10)
      oprot.writeString(self.constrainChoices)
      oprot.writeFieldEnd()
    if self.setVariable is not None:
      oprot.writeFieldBegin('setVariable', TType.STRING, 11)
      oprot.writeString(self.setVariable)
      oprot.writeFieldEnd()
    if self.setVariableValue is not None:
      oprot.writeFieldBegin('setVariableValue', TType.STRING, 12)
      oprot.writeString(self.setVariableValue)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.STRING, 13)
      oprot.writeString(self.type)
      oprot.writeFieldEnd()
    if self.caption is not None:
      oprot.writeFieldBegin('caption', TType.STRING, 14)
      oprot.writeString(self.caption)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Prompt:
  """
  Attributes:
   - promptName
   - scope
   - promptFilters
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'promptName', None, None, ), # 1
    (2, TType.STRING, 'scope', None, None, ), # 2
    (3, TType.LIST, 'promptFilters', (TType.STRUCT,(PromptFilter, PromptFilter.thrift_spec)), None, ), # 3
  )

  def __init__(self, promptName=None, scope=None, promptFilters=None,):
    self.promptName = promptName
    self.scope = scope
    self.promptFilters = promptFilters

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.promptName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.scope = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.promptFilters = []
          (_etype31, _size28) = iprot.readListBegin()
          for _i32 in xrange(_size28):
            _elem33 = PromptFilter()
            _elem33.read(iprot)
            self.promptFilters.append(_elem33)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Prompt')
    if self.promptName is not None:
      oprot.writeFieldBegin('promptName', TType.STRING, 1)
      oprot.writeString(self.promptName)
      oprot.writeFieldEnd()
    if self.scope is not None:
      oprot.writeFieldBegin('scope', TType.STRING, 2)
      oprot.writeString(self.scope)
      oprot.writeFieldEnd()
    if self.promptFilters is not None:
      oprot.writeFieldBegin('promptFilters', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.promptFilters))
      for iter34 in self.promptFilters:
        iter34.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Report:
  """
  Attributes:
   - reportName
   - reportSql
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'reportName', None, None, ), # 1
    (2, TType.STRING, 'reportSql', None, None, ), # 2
  )

  def __init__(self, reportName=None, reportSql=None,):
    self.reportName = reportName
    self.reportSql = reportSql

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.reportName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.reportSql = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Report')
    if self.reportName is not None:
      oprot.writeFieldBegin('reportName', TType.STRING, 1)
      oprot.writeString(self.reportName)
      oprot.writeFieldEnd()
    if self.reportSql is not None:
      oprot.writeFieldBegin('reportSql', TType.STRING, 2)
      oprot.writeString(self.reportSql)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Page:
  """
  Attributes:
   - pageName
   - prompts
   - reports
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'pageName', None, None, ), # 1
    (2, TType.MAP, 'prompts', (TType.STRING,None,TType.I32,None), None, ), # 2
    (3, TType.MAP, 'reports', (TType.STRING,None,TType.I32,None), None, ), # 3
  )

  def __init__(self, pageName=None, prompts=None, reports=None,):
    self.pageName = pageName
    self.prompts = prompts
    self.reports = reports

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.pageName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.MAP:
          self.prompts = {}
          (_ktype36, _vtype37, _size35 ) = iprot.readMapBegin() 
          for _i39 in xrange(_size35):
            _key40 = iprot.readString();
            _val41 = iprot.readI32();
            self.prompts[_key40] = _val41
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.MAP:
          self.reports = {}
          (_ktype43, _vtype44, _size42 ) = iprot.readMapBegin() 
          for _i46 in xrange(_size42):
            _key47 = iprot.readString();
            _val48 = iprot.readI32();
            self.reports[_key47] = _val48
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Page')
    if self.pageName is not None:
      oprot.writeFieldBegin('pageName', TType.STRING, 1)
      oprot.writeString(self.pageName)
      oprot.writeFieldEnd()
    if self.prompts is not None:
      oprot.writeFieldBegin('prompts', TType.MAP, 2)
      oprot.writeMapBegin(TType.STRING, TType.I32, len(self.prompts))
      for kiter49,viter50 in self.prompts.items():
        oprot.writeString(kiter49)
        oprot.writeI32(viter50)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.reports is not None:
      oprot.writeFieldBegin('reports', TType.MAP, 3)
      oprot.writeMapBegin(TType.STRING, TType.I32, len(self.reports))
      for kiter51,viter52 in self.reports.items():
        oprot.writeString(kiter51)
        oprot.writeI32(viter52)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class srcMetadataset:
  """
  Attributes:
   - cid
   - appName
   - style
   - subs
   - savedFilters
   - srcMetadata
   - prompt
   - report
   - page
   - updateInfo
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'cid', None, None, ), # 1
    (2, TType.STRING, 'appName', None, None, ), # 2
    (3, TType.STRING, 'style', None, None, ), # 3
    (4, TType.MAP, 'subs', (TType.STRING,None,TType.I32,None), None, ), # 4
    (5, TType.MAP, 'savedFilters', (TType.STRING,None,TType.STRING,None), None, ), # 5
    (6, TType.STRING, 'srcMetadata', None, None, ), # 6
    (7, TType.STRUCT, 'prompt', (Prompt, Prompt.thrift_spec), None, ), # 7
    (8, TType.STRUCT, 'report', (Report, Report.thrift_spec), None, ), # 8
    (9, TType.STRUCT, 'page', (Page, Page.thrift_spec), None, ), # 9
    (10, TType.STRING, 'updateInfo', None, None, ), # 10
  )

  def __init__(self, cid=None, appName=None, style=None, subs=None, savedFilters=None, srcMetadata=None, prompt=None, report=None, page=None, updateInfo=None,):
    self.cid = cid
    self.appName = appName
    self.style = style
    self.subs = subs
    self.savedFilters = savedFilters
    self.srcMetadata = srcMetadata
    self.prompt = prompt
    self.report = report
    self.page = page
    self.updateInfo = updateInfo

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.cid = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.appName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.style = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.MAP:
          self.subs = {}
          (_ktype54, _vtype55, _size53 ) = iprot.readMapBegin() 
          for _i57 in xrange(_size53):
            _key58 = iprot.readString();
            _val59 = iprot.readI32();
            self.subs[_key58] = _val59
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.MAP:
          self.savedFilters = {}
          (_ktype61, _vtype62, _size60 ) = iprot.readMapBegin() 
          for _i64 in xrange(_size60):
            _key65 = iprot.readString();
            _val66 = iprot.readString();
            self.savedFilters[_key65] = _val66
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.srcMetadata = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRUCT:
          self.prompt = Prompt()
          self.prompt.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRUCT:
          self.report = Report()
          self.report.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRUCT:
          self.page = Page()
          self.page.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.updateInfo = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('srcMetadataset')
    if self.cid is not None:
      oprot.writeFieldBegin('cid', TType.I32, 1)
      oprot.writeI32(self.cid)
      oprot.writeFieldEnd()
    if self.appName is not None:
      oprot.writeFieldBegin('appName', TType.STRING, 2)
      oprot.writeString(self.appName)
      oprot.writeFieldEnd()
    if self.style is not None:
      oprot.writeFieldBegin('style', TType.STRING, 3)
      oprot.writeString(self.style)
      oprot.writeFieldEnd()
    if self.subs is not None:
      oprot.writeFieldBegin('subs', TType.MAP, 4)
      oprot.writeMapBegin(TType.STRING, TType.I32, len(self.subs))
      for kiter67,viter68 in self.subs.items():
        oprot.writeString(kiter67)
        oprot.writeI32(viter68)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.savedFilters is not None:
      oprot.writeFieldBegin('savedFilters', TType.MAP, 5)
      oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.savedFilters))
      for kiter69,viter70 in self.savedFilters.items():
        oprot.writeString(kiter69)
        oprot.writeString(viter70)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.srcMetadata is not None:
      oprot.writeFieldBegin('srcMetadata', TType.STRING, 6)
      oprot.writeString(self.srcMetadata)
      oprot.writeFieldEnd()
    if self.prompt is not None:
      oprot.writeFieldBegin('prompt', TType.STRUCT, 7)
      self.prompt.write(oprot)
      oprot.writeFieldEnd()
    if self.report is not None:
      oprot.writeFieldBegin('report', TType.STRUCT, 8)
      self.report.write(oprot)
      oprot.writeFieldEnd()
    if self.page is not None:
      oprot.writeFieldBegin('page', TType.STRUCT, 9)
      self.page.write(oprot)
      oprot.writeFieldEnd()
    if self.updateInfo is not None:
      oprot.writeFieldBegin('updateInfo', TType.STRING, 10)
      oprot.writeString(self.updateInfo)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class InvalidValueException(Exception):
  """
  Attributes:
   - error_code
   - error_msg
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'error_code', None, None, ), # 1
    (2, TType.STRING, 'error_msg', None, None, ), # 2
  )

  def __init__(self, error_code=None, error_msg=None,):
    self.error_code = error_code
    self.error_msg = error_msg

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.error_code = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.error_msg = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('InvalidValueException')
    if self.error_code is not None:
      oprot.writeFieldBegin('error_code', TType.I32, 1)
      oprot.writeI32(self.error_code)
      oprot.writeFieldEnd()
    if self.error_msg is not None:
      oprot.writeFieldBegin('error_msg', TType.STRING, 2)
      oprot.writeString(self.error_msg)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __str__(self):
    return repr(self)

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
